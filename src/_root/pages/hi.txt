import * as React from "react";
import { useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import {
  ColumnDef,
  SortingState,
  VisibilityState,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { ChevronDown, MoreHorizontal } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { flexRender } from "@tanstack/react-table";

export type Course = {
  id: string;
  course_code: string;
  course_name: string;
  instructor_name: string;
  instructor_id: string;
  avail: string;
  dcfor: string[];
  defor: string[];
  icornot: string;
  slot: string;
  credit: number;
  ltpc: string;
};

export const columns: ColumnDef<Course>[] = [
  {
    accessorKey: "course_code",
    header: "Course Code",
    cell: ({ row }) => <div>{row.getValue("course_code")}</div>,
  },
  {
    accessorKey: "course_name",
    header: "Course Name",
    cell: ({ row }) => <div>{row.getValue("course_name")}</div>,
  },
  {
    accessorKey: "instructor_name",
    header: "Instructor Name",
    cell: ({ row }) => <div>{row.getValue("instructor_name")}</div>,
  },
  {
    accessorKey: "instructor_id",
    header: "Instructor ID",
    cell: ({ row }) => <div>{row.getValue("instructor_id")}</div>,
  },
  {
    accessorKey: "avail",
    header: "Availability",
    cell: ({ row }) => <div>{row.getValue("avail")}</div>,
  },
  {
    accessorKey: "dcfor",
    header: "DC For",
    cell: ({ row }) => {
        const value = row.getValue<string[]>("dcfor"); // Explicitly cast as string[]
        return <div>{value?.join(", ")}</div>;
      }
      
  },
  {
    accessorKey: "defor",
    header: "DE For",
    cell: ({ row }) => {
        const value = row.getValue<string[]>("defor"); // Explicitly cast as string[]
        return <div>{value?.join(", ")}</div>;
      }
      
  },
  {
    accessorKey: "icornot",
    header: "IC or Not",
    cell: ({ row }) => <div>{row.getValue("icornot")}</div>,
  },
  {
    accessorKey: "slot",
    header: "Slot",
    cell: ({ row }) => <div>{row.getValue("slot")}</div>,
  },
  {
    accessorKey: "credit",
    header: "Credit",
    cell: ({ row }) => <div>{row.getValue("credit")}</div>,
  },
  {
    accessorKey: "ltpc",
    header: "LTPC",
    cell: ({ row }) => <div>{row.getValue("ltpc")}</div>,
  },
  {
    id: "actions",
    header: "Actions",
    cell: ({ row }) => {
      const course = row.original;

      const deleteCourse = async (id: string) => {
        const isConfirmed = window.confirm(
          "Are you sure you want to permanently delete this course?"
        );
        if (!isConfirmed) return;

        try {
          const response = await fetch(http://localhost:5001/courses/${id}, {
            method: "DELETE",
          });

          if (response.ok) {
            window.location.reload();
            alert("Course has been deleted successfully!");
          } else {
            alert("Failed to delete course.");
          }
        } catch (error) {
          console.error("Error deleting course:", error);
        }
      };

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <MoreHorizontal />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem
              onClick={() =>
                (window.location.href = /edit-course/${course.course_code})
              }
            >
              Edit Course
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => deleteCourse(course.course_code)}>
              Delete Course
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];

const AllCourses = () => {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [courses, setCourses] = useState<Course[]>([]);
  const [searchTerm, setSearchTerm] = useState("");

  const navigate = useNavigate();

  const getCourses = async () => {
    try {
      const response = await fetch("http://localhost:5001/courses");
      const jsonData = await response.json();
      setCourses(jsonData);
    } catch (error) {
      console.error("Error fetching courses:", error);
    }
  };

  useEffect(() => {
    getCourses();
  }, []);

  // Filter courses based on search term
  const filteredCourses = courses.filter((course) =>
    [course.course_code, course.course_name]
      .join(" ")
      .toLowerCase()
      .includes(searchTerm.toLowerCase())
  );

  const table = useReactTable({
    data: filteredCourses,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    state: {
      sorting,
      columnVisibility,
    },
  });

  return (
    <div className="mt-10 ml-10 mr-10 mb-10 justify-center items-center min-h-screen">
      <div className="flex items-center py-4 space-x-4">
        <Input
          placeholder="Search by course code or name..."
          value={searchTerm}
          onChange={(event) => setSearchTerm(event.target.value)}
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline">
              Visible <ChevronDown />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table.getAllColumns().map((column) => (
              <DropdownMenuItem key={column.id} className="capitalize">
                <Checkbox
                  checked={column.getIsVisible()}
                  onCheckedChange={(value) => column.toggleVisibility(!!value)}
                />
                {column.id}
              </DropdownMenuItem>
            ))}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                    <TableHead key={header.id} className="text-black">
  {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
</TableHead>

                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
  {flexRender(cell.column.columnDef.cell, cell.getContext())}
</TableCell>

                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button onClick={() => navigate("/add-course")}>Add Course</Button>
      </div>
    </div>
  );
};

export default AllCourses;